{
    "general": [
        {
            "id": 1,
            "code": "SA 01-01",
            "title": "Industry Best Practices",
            "category": "General",
            "description": "Align to industry best practices when introducing new tools, patterns, or architecture. In order of preference, use existing established patterns and practices first for consistency, research and adapt best-practices in industry second, and custom coding last. "
        },
        {
            "id": 2,
            "code": "SA 01-02",
            "title": "Component Reusability",
            "category": "General",
            "description": "Strive for designing components for re-usability. This will help to maximize re-use potential by enabling users to integrate the component in a variety of different contexts."
        },
        {
            "id": 3,
            "code": "SA 01-04",
            "title": "Rapid Prototyping",
            "category": "General",
            "description": "Leverage proof-of-concepts to drive innovation. For any significant task where there are unknowns as to how to apply industry best practices, consider investing in a rapid proof-of-concept. Prototyping is a quick way for developers to discover alternative solutions that will meet the core requirements while ensuring that best-pratices in coding and design are being followed."
        },
        {
            "id": 4,
            "code": "SA 01-05",
            "title": "Standards",
            "category": "General",
            "description": "Always prefer standards compliance and industry solutions over customization. Any developer can write custom code to meet a requirement. However, industry solutions are usually not that much more effort to code, requires less coding with fewer defects, and often lowers integration costs with 3rd party products. The small investment to research industry best practices is well worth it."
        },
        {
            "id": 5,
            "code": "SA 01-05",
            "title": "Testability",
            "category": "General",
            "description": "Writing tests and ensuring test coverage are fundamental to ensuring high code quality. Strive for superior test coverage for all major functionality. When developers write tests against the code that they write, they are forced to write testable code.  This results in resiliant code that is far less brittle and much easier to develop, refactor, and maintain. "
        },
        {
            "id": 6,
            "code": "SA 01-06",
            "title": "Automation",
            "category": "General",
            "description": "Leverage software and tools to automate key development, build, and deployment processes to promote developer productivity, optimize operational efficiency, and enable business agility. "
        },
        {
            "id": 7,
            "code": "SA 01-07",
            "title": "Enforced Architecture ",
            "category": "General",
            "description": "When a new pattern or architecture is introduced, consider exploring ways to enforce the pattern through tools or automation, that would reduce or eliminate the reliance on manual code reviews to uncover deviations from the established architecture. This will help to ensure consistency, quality, and longevity with regards to architecture patterns and practices."
        },
        {
            "id": 8,
            "code": "SA 01-08",
            "title": "Interoperability",
            "category": "General",
            "description": "Write once, use anywhere. Build components and modules with the intent that it can be published and shared across teams, projects, and even organizations. Follow open industry standards rather than writing custom code in order to ensure maximal interoperability. "
        }        
    ],
    "angular": [
        {
            "id": 1,
            "code": "SA 01-01",
            "title": "LIFT",
            "category": "Application Structure",
            "description": "Locate, Identify, Flat, T-DRY.  Organize files and folders so that they are easy to Locate. Files should be easy to Identify at a glance. Keep a Flat folder structure as long as possible. Try not to repeat yourself."
        },
        {
            "id": 2,
            "code": "SA 01-02",
            "title": "Folders-by-Feature",
            "category": "Application Structure",
            "description": "Try to have a folder for each feature area under the App module. For each feature area, consider organizing related files together in its own NgModule.  Why? This practice aligns to the LIFT principle."
        },
        {
            "id": 3,
            "code": "SA 01-03",
            "title": "Shared Module",
            "category": "Application Structure",
            "description": "For each feature area, consider placing shared components, directives, and pipes into a SharedModule.  Avoid placing singleton services with application scope in a SharedModule. Intentional singletons are Ok."
        },
        {
            "id": 4,
            "code": "SA 01-04",
            "title": "Services",
            "category": "Services",
            "description": "Use services for sharing data or functionality between components. Create services as singletons.  Use hierrarchical injectors to limit their scope to the top-most component that needs it."
        }

    ]
}